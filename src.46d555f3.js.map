{"version":3,"sources":["../node_modules/terminaltxt/dist/terminaltxt.js","Vec2.ts","Leaf.ts","Direction.ts","Caterpillar.ts","Map.ts","index.ts"],"names":[],"mappings":";;AAAA,IAAA,GAAA,SAAA,EAAA,GAAA,iBAAA,SAAA,iBAAA,OAAA,OAAA,QAAA,IAAA,mBAAA,GAAA,EAAA,IAAA,EAAA,GAAA,GAAA,iBAAA,QAAA,QAAA,YAAA,IAAA,EAAA,YAAA,IAAA,CAAA,OAAA,WAAA,OAAA,SAAA,GAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,GAAA,EAAA,GAAA,OAAA,EAAA,GAAA,QAAA,IAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,EAAA,QAAA,IAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,EAAA,EAAA,QAAA,GAAA,EAAA,GAAA,EAAA,EAAA,QAAA,OAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,OAAA,eAAA,EAAA,EAAA,CAAA,YAAA,EAAA,IAAA,KAAA,EAAA,EAAA,SAAA,GAAA,oBAAA,QAAA,OAAA,aAAA,OAAA,eAAA,EAAA,OAAA,YAAA,CAAA,MAAA,WAAA,OAAA,eAAA,EAAA,aAAA,CAAA,OAAA,KAAA,EAAA,EAAA,SAAA,EAAA,GAAA,GAAA,EAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAA,EAAA,GAAA,iBAAA,GAAA,GAAA,EAAA,WAAA,OAAA,EAAA,IAAA,EAAA,OAAA,OAAA,MAAA,GAAA,EAAA,EAAA,GAAA,OAAA,eAAA,EAAA,UAAA,CAAA,YAAA,EAAA,MAAA,IAAA,EAAA,GAAA,iBAAA,EAAA,IAAA,IAAA,KAAA,EAAA,EAAA,EAAA,EAAA,EAAA,SAAA,GAAA,OAAA,EAAA,IAAA,KAAA,KAAA,IAAA,OAAA,GAAA,EAAA,EAAA,SAAA,GAAA,IAAA,EAAA,GAAA,EAAA,WAAA,WAAA,OAAA,EAAA,SAAA,WAAA,OAAA,GAAA,OAAA,EAAA,EAAA,EAAA,IAAA,GAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,OAAA,UAAA,eAAA,KAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,CAAA,CAAA,SAAA,EAAA,EAAA,GAAA,aAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,WAAA,SAAA,EAAA,EAAA,GAAA,QAAA,IAAA,IAAA,EAAA,EAAA,0BAAA,iBAAA,EAAA,CAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,WAAA,IAAA,IAAA,EAAA,QAAA,IAAA,EAAA,KAAA,GAAA,KAAA,IAAA,OAAA,KAAA,IAAA,EAAA,KAAA,QAAA,EAAA,iBAAA,EAAA,EAAA,WAAA,GAAA,EAAA,IAAA,WAAA,GAAA,OAAA,EAAA,uBAAA,WAAA,MAAA,CAAA,GAAA,OAAA,EAAA,UAAA,SAAA,SAAA,GAAA,OAAA,KAAA,IAAA,QAAA,EAAA,WAAA,KAAA,EAAA,UAAA,SAAA,SAAA,GAAA,OAAA,GAAA,GAAA,EAAA,KAAA,IAAA,OAAA,KAAA,IAAA,GAAA,KAAA,SAAA,EAAA,UAAA,KAAA,WAAA,OAAA,KAAA,IAAA,QAAA,EAAA,UAAA,SAAA,SAAA,GAAA,OAAA,OAAA,aAAA,KAAA,SAAA,KAAA,EAAA,IAAA,SAAA,GAAA,EAAA,EAAA,QAAA,GAAA,UAAA,EAAA,EAAA,MAAA,GAAA,QAAA,EAAA,EAAA,SAAA,GAAA,WAAA,CAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,WAAA,SAAA,IAAA,KAAA,QAAA,GAAA,KAAA,SAAA,EAAA,KAAA,UAAA,KAAA,UAAA,KAAA,MAAA,SAAA,iBAAA,UAAA,KAAA,WAAA,SAAA,iBAAA,QAAA,KAAA,WAAA,SAAA,iBAAA,WAAA,KAAA,WAAA,OAAA,EAAA,UAAA,UAAA,SAAA,GAAA,KAAA,QAAA,KAAA,IAAA,EAAA,UAAA,WAAA,SAAA,GAAA,KAAA,QAAA,GAAA,EAAA,UAAA,UAAA,SAAA,GAAA,KAAA,SAAA,QAAA,IAAA,0BAAA,EAAA,IAAA,YAAA,EAAA,MAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,QAAA,OAAA,KAAA,IAAA,KAAA,QAAA,GAAA,KAAA,QAAA,EAAA,OAAA,YAAA,EAAA,MAAA,KAAA,QAAA,GAAA,eAAA,EAAA,QAAA,KAAA,QAAA,GAAA,OAAA,EAAA,KAAA,UAAA,EAAA,MAAA,KAAA,QAAA,GAAA,eAAA,EAAA,MAAA,KAAA,QAAA,GAAA,OAAA,EAAA,KAAA,aAAA,EAAA,MAAA,KAAA,QAAA,GAAA,eAAA,EAAA,UAAA,KAAA,QAAA,GAAA,OAAA,EAAA,OAAA,EAAA,GAAA,EAAA,WAAA,SAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,oBAAA,KAAA,UAAA,EAAA,KAAA,IAAA,SAAA,cAAA,OAAA,KAAA,KAAA,SAAA,cAAA,QAAA,KAAA,QAAA,SAAA,cAAA,QAAA,KAAA,SAAA,EAAA,QAAA,KAAA,UAAA,YAAA,KAAA,KAAA,KAAA,IAAA,YAAA,KAAA,MAAA,KAAA,KAAA,YAAA,KAAA,SAAA,KAAA,SAAA,KAAA,aAAA,OAAA,EAAA,iBAAA,WAAA,IAAA,EAAA,SAAA,cAAA,OAAA,OAAA,SAAA,KAAA,YAAA,GAAA,GAAA,EAAA,MAAA,WAAA,IAAA,EAAA,EAAA,UAAA,OAAA,EAAA,YAAA,GAAA,EAAA,UAAA,MAAA,WAAA,KAAA,QAAA,UAAA,IAAA,EAAA,UAAA,WAAA,WAAA,KAAA,UAAA,UAAA,IAAA,qBAAA,KAAA,IAAA,UAAA,IAAA,eAAA,KAAA,KAAA,UAAA,IAAA,gBAAA,KAAA,QAAA,UAAA,IAAA,oBAAA,EAAA,UAAA,OAAA,WAAA,IAAA,EAAA,EAAA,IAAA,KAAA,SAAA,GAAA,IAAA,KAAA,SAAA,WAAA,KAAA,UAAA,GAAA,oBAAA,EAAA,KAAA,IAAA,GAAA,cAAA,EAAA,KAAA,KAAA,GAAA,eAAA,EAAA,KAAA,QAAA,GAAA,kBAAA,GAAA,EAAA,UAAA,EAAA,EAAA,GAAA,GAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,KAAA,EAAA,SAAA,GAAA,SAAA,EAAA,EAAA,QAAA,IAAA,IAAA,GAAA,GAAA,IAAA,EAAA,KAAA,OAAA,EAAA,EAAA,EAAA,KAAA,KAAA,IAAA,KAAA,EAAA,KAAA,OAAA,MAAA,SAAA,EAAA,EAAA,MAAA,GAAA,EAAA,UAAA,EAAA,iBAAA,GAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,UAAA,QAAA,SAAA,QAAA,IAAA,IAAA,EAAA,IAAA,KAAA,QAAA,YAAA,SAAA,eAAA,OAAA,KAAA,MAAA,KAAA,SAAA,cAAA,SAAA,KAAA,QAAA,YAAA,KAAA,MAAA,KAAA,MAAA,OAAA,IAAA,KAAA,eAAA,IAAA,EAAA,UAAA,kBAAA,SAAA,GAAA,KAAA,MAAA,KAAA,MAAA,OAAA,GAAA,WAAA,EAAA,KAAA,oBAAA,EAAA,UAAA,gBAAA,WAAA,KAAA,iBAAA,GAAA,KAAA,MAAA,SAAA,EAAA,UAAA,eAAA,SAAA,GAAA,KAAA,MAAA,KAAA,MAAA,OAAA,GAAA,UAAA,EAAA,KAAA,oBAAA,EAAA,UAAA,iBAAA,WAAA,GAAA,KAAA,UAAA,EAAA,KAAA,KAAA,MAAA,OAAA,KAAA,UAAA,KAAA,mBAAA,EAAA,UAAA,iBAAA,SAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,IAAA,KAAA,QAAA,YAAA,KAAA,QAAA,WAAA,KAAA,EAAA,CAAA,GAAA,EAAA,WAAA,SAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,SAAA,IAAA,IAAA,EAAA,IAAA,KAAA,aAAA,EAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,OAAA,KAAA,OAAA,EAAA,OAAA,KAAA,OAAA,GAAA,EAAA,UAAA,KAAA,eAAA,IAAA,EAAA,KAAA,OAAA,EAAA,WAAA,KAAA,eAAA,IAAA,EAAA,KAAA,QAAA,EAAA,OAAA,KAAA,aAAA,EAAA,IAAA,KAAA,eAAA,eAAA,GAAA,OAAA,EAAA,UAAA,UAAA,WAAA,OAAA,KAAA,QAAA,EAAA,UAAA,SAAA,WAAA,OAAA,KAAA,MAAA,EAAA,OAAA,UAAA,KAAA,OAAA,EAAA,UAAA,QAAA,WAAA,KAAA,eAAA,WAAA,EAAA,UAAA,UAAA,SAAA,GAAA,IAAA,EAAA,EAAA,KAAA,KAAA,EAAA,OAAA,KAAA,YAAA,KAAA,aAAA,KAAA,KAAA,EAAA,OAAA,KAAA,YAAA,KAAA,aAAA,IAAA,IAAA,EAAA,EAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,KAAA,eAAA,MAAA,QAAA,EAAA,GAAA,GAAA,GAAA,GAAA,EAAA,KAAA,eAAA,MAAA,QAAA,KAAA,eAAA,MAAA,GAAA,UAAA,UAAA,EAAA,KAAA,EAAA,UAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,MAAA,IAAA,OAAA,OAAA,KAAA,WAAA,IAAA,MAAA,GAAA,OAAA,EAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,EAAA,KAAA,eAAA,MAAA,OAAA,KAAA,eAAA,MAAA,EAAA,GAAA,UAAA,EAAA,GAAA,KAAA,QAAA,EAAA,IAAA,IAAA,EAAA,EAAA,OAAA,GAAA,EAAA,IAAA,EAAA,EAAA,KAAA,eAAA,MAAA,SAAA,KAAA,eAAA,MAAA,EAAA,GAAA,UAAA,IAAA,YAAA,KAAA,aAAA,EAAA,OAAA,KAAA,IAAA,KAAA,eAAA,MAAA,QAAA,KAAA,KAAA,eAAA,MAAA,GAAA,UAAA,KAAA,MAAA,GAAA,KAAA,QAAA,IAAA,EAAA,UAAA,kBAAA,WAAA,KAAA,aAAA,GAAA,EAAA,UAAA,MAAA,SAAA,GAAA,IAAA,EAAA,KAAA,eAAA,MAAA,KAAA,eAAA,MAAA,OAAA,GAAA,UAAA,OAAA,EAAA,EAAA,QAAA,KAAA,WAAA,KAAA,eAAA,kBAAA,GAAA,IAAA,KAAA,WAAA,KAAA,eAAA,QAAA,IAAA,KAAA,eAAA,kBAAA,EAAA,UAAA,EAAA,KAAA,WAAA,IAAA,KAAA,QAAA,EAAA,UAAA,KAAA,WAAA,EAAA,EAAA,WAAA,EAAA,UAAA,QAAA,SAAA,GAAA,GAAA,EAAA,QAAA,KAAA,WAAA,KAAA,eAAA,QAAA,OAAA,CAAA,IAAA,EAAA,EAAA,MAAA,IAAA,OAAA,OAAA,KAAA,WAAA,IAAA,MAAA,GAAA,OAAA,EAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,KAAA,eAAA,QAAA,EAAA,MAAA,EAAA,GAAA,EAAA,WAAA,SAAA,EAAA,QAAA,IAAA,IAAA,EAAA,IAAA,GAAA,KAAA,QAAA,GAAA,KAAA,eAAA,EAAA,KAAA,WAAA,IAAA,KAAA,QAAA,GAAA,KAAA,SAAA,GAAA,KAAA,MAAA,IAAA,EAAA,KAAA,OAAA,EAAA,KAAA,gBAAA,KAAA,gBAAA,KAAA,MAAA,KAAA,aAAA,KAAA,aAAA,KAAA,MAAA,KAAA,iBAAA,KAAA,iBAAA,KAAA,MAAA,KAAA,gBAAA,KAAA,gBAAA,KAAA,MAAA,KAAA,YAAA,KAAA,YAAA,KAAA,MAAA,KAAA,YAAA,KAAA,YAAA,KAAA,MAAA,KAAA,aAAA,KAAA,gBAAA,CAAA,KAAA,OAAA,YAAA,iDAAA,QAAA,KAAA,YAAA,QAAA,CAAA,CAAA,SAAA,SAAA,YAAA,mEAAA,KAAA,SAAA,OAAA,EAAA,uBAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,EAAA,GAAA,WAAA,EAAA,OAAA,EAAA,OAAA,GAAA,EAAA,wBAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,EAAA,KAAA,EAAA,uBAAA,EAAA,GAAA,IAAA,OAAA,GAAA,EAAA,UAAA,gBAAA,SAAA,GAAA,IAAA,IAAA,GAAA,EAAA,EAAA,KAAA,QAAA,MAAA,KAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,GAAA,KAAA,SAAA,GAAA,KAAA,gBAAA,EAAA,GAAA,cAAA,CAAA,IAAA,EAAA,KAAA,eAAA,GAAA,EAAA,KAAA,SAAA,GAAA,QAAA,KAAA,OAAA,GAAA,OAAA,IAAA,EAAA,KAAA,OAAA,QAAA,OAAA,KAAA,QAAA,mEAAA,EAAA,GAAA,KAAA,OAAA,QAAA,IAAA,EAAA,GAAA,gBAAA,EAAA,yBAAA,EAAA,GAAA,2BAAA,KAAA,aAAA,KAAA,SAAA,KAAA,OAAA,UAAA,KAAA,OAAA,oBAAA,KAAA,QAAA,GAAA,KAAA,UAAA,EAAA,UAAA,YAAA,SAAA,EAAA,GAAA,GAAA,IAAA,EAAA,OAAA,CAAA,EAAA,QAAA,gBAAA,EAAA,QAAA,gBAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,EAAA,QAAA,YAAA,KAAA,SAAA,GAAA,MAAA,EAAA,QAAA,gBAAA,KAAA,SAAA,GAAA,aAAA,OAAA,EAAA,QAAA,wEAAA,EAAA,IAAA,EAAA,EAAA,wBAAA,CAAA,UAAA,GAAA,IAAA,IAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,EAAA,IAAA,QAAA,IAAA,EAAA,YAAA,IAAA,EAAA,WAAA,OAAA,OAAA,EAAA,QAAA,0FAAA,EAAA,IAAA,EAAA,KAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,OAAA,IAAA,KAAA,SAAA,GAAA,OAAA,EAAA,WAAA,KAAA,EAAA,KAAA,SAAA,IAAA,GAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,WAAA,GAAA,oDAAA,EAAA,GAAA,EAAA,QAAA,YAAA,EAAA,MAAA,EAAA,QAAA,gBAAA,EAAA,aAAA,EAAA,QAAA,2BAAA,IAAA,EAAA,QAAA,IAAA,EAAA,QAAA,yHAAA,EAAA,EAAA,EAAA,EAAA,QAAA,OAAA,IAAA,EAAA,QAAA,UAAA,EAAA,QAAA,GAAA,UAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,GAAA,kBAAA,EAAA,QAAA,kCAAA,GAAA,EAAA,QAAA,mBAAA,IAAA,EAAA,UAAA,IAAA,EAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,EAAA,QAAA,gBAAA,EAAA,UAAA,GAAA,MAAA,EAAA,QAAA,kBAAA,EAAA,UAAA,GAAA,kBAAA,EAAA,QAAA,0BAAA,OAAA,EAAA,OAAA,EAAA,QAAA,kEAAA,GAAA,EAAA,UAAA,gBAAA,SAAA,GAAA,KAAA,SAAA,KAAA,IAAA,EAAA,UAAA,OAAA,WAAA,KAAA,OAAA,UAAA,KAAA,KAAA,UAAA,EAAA,UAAA,aAAA,SAAA,GAAA,KAAA,QAAA,KAAA,QAAA,EAAA,KAAA,UAAA,EAAA,UAAA,aAAA,SAAA,GAAA,KAAA,QAAA,KAAA,GAAA,KAAA,QAAA,OAAA,KAAA,YAAA,KAAA,QAAA,QAAA,KAAA,eAAA,KAAA,QAAA,QAAA,EAAA,UAAA,iBAAA,SAAA,GAAA,KAAA,QAAA,KAAA,QAAA,UAAA,EAAA,KAAA,QAAA,OAAA,GAAA,KAAA,UAAA,EAAA,UAAA,YAAA,SAAA,GAAA,KAAA,QAAA,OAAA,IAAA,KAAA,eAAA,GAAA,KAAA,iBAAA,KAAA,QAAA,KAAA,QAAA,KAAA,gBAAA,KAAA,WAAA,EAAA,UAAA,gBAAA,SAAA,GAAA,KAAA,QAAA,OAAA,IAAA,KAAA,eAAA,KAAA,QAAA,OAAA,GAAA,KAAA,iBAAA,KAAA,QAAA,KAAA,QAAA,KAAA,gBAAA,KAAA,WAAA,EAAA,UAAA,eAAA,SAAA,GAAA,IAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,QAAA,CAAA,GAAA,OAAA,EAAA,GAAA,UAAA,EAAA,GAAA,CAAA,IAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,GAAA,UAAA,GAAA,IAAA,EAAA,EAAA,QAAA,MAAA,EAAA,GAAA,UAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,IAAA,IAAA,EAAA,KAAA,CAAA,SAAA,EAAA,WAAA,SAAA,GAAA,MAAA,EAAA,GAAA,UAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,GAAA,OAAA,IAAA,EAAA,KAAA,CAAA,SAAA,EAAA,GAAA,UAAA,EAAA,EAAA,KAAA,IAAA,OAAA,GAAA,EAAA,UAAA,WAAA,WAAA,KAAA,MAAA,UAAA,CAAA,KAAA,CAAA,aAAA,OAAA,KAAA,iBAAA,aAAA,EAAA,QAAA,KAAA,MAAA,UAAA,CAAA,KAAA,CAAA,SAAA,OAAA,KAAA,gBAAA,aAAA,EAAA,WAAA,KAAA,MAAA,UAAA,CAAA,KAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,OAAA,KAAA,aAAA,aAAA,EAAA,WAAA,KAAA,MAAA,UAAA,CAAA,KAAA,CAAA,WAAA,OAAA,KAAA,YAAA,aAAA,EAAA,QAAA,KAAA,MAAA,UAAA,CAAA,KAAA,CAAA,aAAA,OAAA,KAAA,gBAAA,aAAA,EAAA,SAAA,EAAA,GAAA,EAAA,WAAA,IAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,CAAA,UAAA,cAAA,OAAA,SAAA,EAAA,GAAA,EAAA,UAAA,IAAA,SAAA,EAAA,GAAA,IAAA,IAAA,KAAA,EAAA,EAAA,eAAA,KAAA,EAAA,GAAA,EAAA,MAAA,EAAA,IAAA,OAAA,SAAA,EAAA,GAAA,SAAA,IAAA,KAAA,YAAA,EAAA,EAAA,EAAA,GAAA,EAAA,UAAA,OAAA,EAAA,OAAA,OAAA,IAAA,EAAA,UAAA,EAAA,UAAA,IAAA,IAAA,GAAA,EAAA,SAAA,GAAA,SAAA,EAAA,EAAA,EAAA,GAAA,IAAA,EAAA,KAAA,OAAA,EAAA,EAAA,EAAA,KAAA,KAAA,IAAA,KAAA,EAAA,KAAA,OAAA,MAAA,MAAA,EAAA,EAAA,OAAA,EAAA,EAAA,MAAA,GAAA,EAAA,YAAA,EAAA,OAAA,EAAA,EAAA,GAAA,EAAA,UAAA,UAAA,WAAA,OAAA,KAAA,QAAA,EAAA,UAAA,SAAA,WAAA,OAAA,KAAA,OAAA,EAAA,UAAA,MAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,KAAA,OAAA,EAAA,UAAA,aAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,EAAA,GAAA,EAAA,KAAA,MAAA,GAAA,UAAA,GAAA,EAAA,UAAA,UAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,OAAA,IAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,IAAA,KAAA,MAAA,KAAA,SAAA,cAAA,SAAA,KAAA,QAAA,YAAA,KAAA,MAAA,KAAA,MAAA,OAAA,IAAA,KAAA,MAAA,KAAA,MAAA,OAAA,GAAA,GAAA,EAAA,IAAA,EAAA,KAAA,QAAA,YAAA,SAAA,eAAA,SAAA,EAAA,CAAA,GAAA,EAAA,WAAA,SAAA,EAAA,EAAA,GAAA,KAAA,QAAA,GAAA,KAAA,KAAA,GAAA,KAAA,MAAA,EAAA,KAAA,OAAA,EAAA,KAAA,WAAA,KAAA,cAAA,OAAA,EAAA,UAAA,WAAA,SAAA,GAAA,KAAA,QAAA,IAAA,GAAA,EAAA,UAAA,QAAA,SAAA,GAAA,OAAA,KAAA,KAAA,IAAA,EAAA,UAAA,UAAA,WAAA,OAAA,KAAA,QAAA,EAAA,UAAA,SAAA,WAAA,OAAA,KAAA,OAAA,EAAA,UAAA,eAAA,SAAA,GAAA,OAAA,KAAA,QAAA,IAAA,EAAA,UAAA,MAAA,SAAA,EAAA,GAAA,OAAA,EAAA,EAAA,KAAA,OAAA,EAAA,UAAA,cAAA,WAAA,OAAA,KAAA,MAAA,KAAA,QAAA,EAAA,UAAA,QAAA,SAAA,EAAA,GAAA,KAAA,KAAA,GAAA,EAAA,KAAA,QAAA,IAAA,GAAA,EAAA,UAAA,YAAA,WAAA,KAAA,QAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,QAAA,MAAA,IAAA,EAAA,UAAA,SAAA,WAAA,KAAA,KAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,MAAA,KAAA,OAAA,IAAA,KAAA,KAAA,KAAA,IAAA,EAAA,GAAA,EAAA,WAAA,SAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,SAAA,IAAA,IAAA,EAAA,IAAA,GAAA,EAAA,MAAA,KAAA,MAAA,EAAA,MAAA,KAAA,MAAA,GAAA,EAAA,OAAA,KAAA,OAAA,EAAA,OAAA,KAAA,OAAA,GAAA,EAAA,UAAA,KAAA,eAAA,IAAA,EAAA,KAAA,MAAA,KAAA,OAAA,EAAA,WAAA,KAAA,eAAA,IAAA,EAAA,KAAA,MAAA,KAAA,QAAA,KAAA,SAAA,IAAA,EAAA,KAAA,MAAA,KAAA,QAAA,KAAA,aAAA,EAAA,OAAA,EAAA,UAAA,gBAAA,WAAA,OAAA,KAAA,cAAA,EAAA,UAAA,UAAA,WAAA,OAAA,KAAA,QAAA,EAAA,UAAA,SAAA,WAAA,OAAA,KAAA,OAAA,EAAA,UAAA,QAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,EAAA,iBAAA,EAAA,KAAA,aAAA,SAAA,GAAA,GAAA,GAAA,EAAA,KAAA,aAAA,IAAA,OAAA,GAAA,EAAA,KAAA,SAAA,QAAA,EAAA,KAAA,SAAA,MAAA,EAAA,KAAA,EAAA,UAAA,OAAA,WAAA,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,gBAAA,IAAA,KAAA,SAAA,eAAA,KAAA,KAAA,eAAA,aAAA,KAAA,aAAA,SAAA,KAAA,SAAA,QAAA,IAAA,GAAA,KAAA,SAAA,WAAA,KAAA,EAAA,GAAA,EAAA,EAAA,EAAA,eAAA,WAAA,OAAA,IAAA,EAAA,EAAA,EAAA,eAAA,WAAA,OAAA,IAAA,EAAA,EAAA,EAAA,eAAA,WAAA,OAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,WAAA,OAAA,IAAA,EAAA,EAAA,EAAA,mBAAA,WAAA,OAAA,IAAA,EAAA,EAAA,EAAA,iBAAA,WAAA,OAAA;;ACAa,aAAA,QAAA,YAAA,EAAb,IAAA,EAAA,WAKE,SAAA,EAAY,EAAe,QAAf,IAAA,IAAA,EAAA,QAAe,IAAA,IAAA,EAAA,GACpB,KAAA,EAAI,EACJ,KAAA,EAAI,EAmBb,OAhBgB,EAAA,KAAd,SAAmB,GACV,OAAA,IAAI,EAAK,EAAI,EAAG,EAAI,IAKtB,EAAA,UAAA,IAAP,SAAW,EAAyB,GACV,iBAAb,GACJ,KAAA,GAAK,EACL,KAAA,GAAK,IAEL,KAAA,GAAK,EAAS,EACd,KAAA,GAAK,EAAS,IAIzB,EA1BA,GAAa,QAAA,KAAA;;ACEA,aAAA,QAAA,YAAA,EAFb,IAAA,EAAA,QAAA,UAEA,EAAA,WASE,SAAA,EAAY,EAAc,EAAc,EAAc,GAC/C,KAAA,KAAO,EACP,KAAA,KAAO,EACP,KAAA,KAAO,EACP,KAAA,KAAO,EAEP,KAAA,QAUT,OAPS,EAAA,UAAA,MAAP,WACO,KAAA,IAAM,IAAI,EAAA,KACb,KAAK,MAAM,KAAK,UAAY,KAAK,KAAO,KAAK,MAAQ,KAAK,MAC1D,KAAK,MAAM,KAAK,UAAY,KAAK,KAAO,KAAK,MAAQ,KAAK,QAIhE,EAzBA,GAAa,QAAA,KAAA;;ACFb,aAAA,IAAY,EAAZ,QAAA,YAAA,EAAA,SAAY,GACV,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,KAAA,GAAA,OACA,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,KAAA,GAAA,OAJF,CAAY,EAAA,QAAA,YAAA,QAAA,UAAS;;ACOR,aAAA,QAAA,YAAA,EAPb,IAAA,EAAA,QAAA,UAEA,EAAA,QAAA,eAKA,EAAA,WASE,SAAA,EAAY,EAAa,GAPlB,KAAA,KAAe,GACf,KAAA,MAAgB,GAGhB,KAAA,MAAgB,EAIhB,KAAA,KAAK,KAAK,GACV,KAAA,KAAK,KAAK,EAAA,KAAK,KAAK,KAAK,KAAK,KAC9B,KAAA,KAAK,GAAG,IAAI,EAAG,GAEf,KAAA,UAAY,EAAA,UAAU,MACtB,KAAA,OAAS,EACT,KAAA,KAAO,EAEP,KAAA,QAAU,KAAK,QAAQ,KAAK,MAC5B,KAAA,OAAS,KAAK,OAAO,KAAK,MAC1B,KAAA,QAAU,KAAK,QAAQ,KAAK,MAC5B,KAAA,OAAS,KAAK,OAAO,KAAK,MAE1B,KAAA,KAAO,KAAK,KAAK,KAAK,MAqF/B,OAlFS,EAAA,UAAA,KAAP,SAAY,GACL,IAAA,IAAI,EAAY,EAAG,EAAI,KAAK,KAAK,OAAQ,IAC5C,EAAK,QAAQ,KAAK,KAAM,KAAK,KAAK,GAAG,EAAG,KAAK,KAAK,GAAG,GAElD,IAAI,EAAY,EAAG,EAAI,KAAK,MAAM,OAAQ,IAC7C,EAAK,QAAQ,EAAG,KAAK,MAAM,GAAG,EAAG,KAAK,MAAM,GAAG,GAE5C,KAAA,MAAQ,IAGR,EAAA,UAAA,KAAP,WACM,IAAA,EAAO,EAAA,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,OAAS,IAC3C,OAAA,KAAK,WACL,KAAA,EAAA,UAAU,MACb,EAAK,IAAI,GAAI,GACb,MACG,KAAA,EAAA,UAAU,KACb,EAAK,IAAI,EAAG,GACZ,MACG,KAAA,EAAA,UAAU,MACb,EAAK,IAAI,EAAG,GACZ,MACG,KAAA,EAAA,UAAU,KACb,EAAK,KAAK,EAAG,GAIX,IADD,KAAA,KAAK,KAAK,GACT,KAAK,KAAK,OAAS,KAAK,QACvB,KAAA,MAAM,KAAK,KAAK,KAAK,UAIvB,EAAA,UAAA,KAAP,WACO,KAAA,UAGA,EAAA,UAAA,QAAP,WACM,KAAK,YAAc,EAAA,UAAU,QAC1B,KAAA,UAAY,EAAA,UAAU,QAIxB,EAAA,UAAA,OAAP,WACM,KAAK,YAAc,EAAA,UAAU,OAC1B,KAAA,UAAY,EAAA,UAAU,OAIxB,EAAA,UAAA,QAAP,WACM,KAAK,YAAc,EAAA,UAAU,QAC1B,KAAA,UAAY,EAAA,UAAU,QAIxB,EAAA,UAAA,OAAP,WACM,KAAK,YAAc,EAAA,UAAU,OAC1B,KAAA,UAAY,EAAA,UAAU,OAIxB,EAAA,UAAA,UAAP,SAAiB,EAAY,GACvB,EAAK,IAAI,IAAM,KAAK,KAAK,KAAK,KAAK,OAAS,GAAG,GAC9C,EAAK,IAAI,IAAM,KAAK,KAAK,KAAK,KAAK,OAAS,GAAG,IAC7C,KAAA,OACL,EAAQ,QAIL,EAAA,UAAA,WAAP,SAAkB,GACV,IAAA,EAAa,KAAK,KAAK,KAAK,KAAK,OAAS,GAC5C,GAAA,EAAK,GAAK,GAAK,EAAK,GAAK,EAAK,WAAa,GAAK,EAAK,GAAK,GAAK,EAAK,GAAK,EAAK,YAAc,EACzF,KAAA,MAAO,OAGT,IAAA,IAAI,EAAY,EAAG,EAAI,KAAK,KAAK,OAAS,EAAG,IAC5C,GAAA,EAAK,IAAM,KAAK,KAAK,GAAG,GAAK,EAAK,IAAM,KAAK,KAAK,GAAG,EAEvD,YADK,KAAA,MAAO,IAMpB,EA5GA,GAAa,QAAA,YAAA;;ACPb,aAAA,SAAgB,EAAI,EAAe,EAAc,EAAc,EAAc,GACpE,OAAC,EAAQ,IAAS,EAAO,IAAS,EAAO,GAAQ,EAD1D,QAAA,YAAA,EAAA,QAAA,IAAA;;ACgLC,aAAA,QAAA,YAAA,EAhLD,IAAA,EAAA,QAAA,eACA,EAAA,QAAA,UACA,EAAA,QAAA,iBACA,EAAA,QAAA,UACA,EAAA,QAAA,SAE4B,aAAxB,SAAS,WACX,IAEA,OAAO,iBAAiB,OAAQ,GAAM,GAGxC,IAEI,EACA,EACA,EACA,EACA,EANE,EAAgB,GAChB,EAAiB,GAOvB,SAAS,IACP,EAAQ,IAAI,EAAA,aACZ,IAGF,SAAS,KACP,EAAQ,IAAI,EAAA,eACV,CACE,UAAW,SAAS,eAAe,oBACnC,MAAO,EACP,OAAQ,KAGN,MAAM,EAAW,cAAe,IACtC,EAAM,QAAQ,gBACd,EAAM,UACN,EAAM,QAAQ,2EACd,EAAM,QAAQ,mDACd,EAAM,UACN,EAAM,QAAQ,mFACd,EAAM,QAAQ,2BACd,EAAM,UAAU,CACd,KAAM,CAAC,SACP,aAAc,EAAA,aAAa,MAC3B,OAAQ,IAIZ,SAAS,IACP,IACA,EAAO,IAAI,EAAA,iBACT,CACE,UAAW,SAAS,eAAe,kBACnC,MAAO,GACP,OAAQ,IAEV,IAAI,EAAA,aAAa,cAEnB,IACA,EAAK,KAGP,SAAS,IACP,IACA,IACA,EAAQ,GACR,IACA,EAAK,SACL,IAGF,SAAS,IACF,IAAA,IAAI,EAAY,EAAG,EAAI,EAAO,IAC5B,IAAA,IAAI,EAAY,EAAG,EAAI,EAAQ,IAClC,EAAK,QAAQ,EAAG,EAAG,GAKzB,SAAS,IACF,IAAA,IAAI,EAAc,EAAG,EAAM,EAAK,WAAa,EAAG,IACnD,EAAK,QAAQ,EAAG,EAAK,GACrB,EAAK,QAAQ,EAAG,EAAK,EAAK,YAAc,GAErC,IAAA,IAAI,EAAc,EAAG,EAAM,EAAK,YAAc,EAAG,IACpD,EAAK,QAAQ,EAAG,EAAG,GACnB,EAAK,QAAQ,EAAG,EAAK,WAAa,EAAG,GAEvC,EAAK,QAAQ,EAAG,EAAG,GACnB,EAAK,QAAQ,EAAG,EAAK,WAAa,EAAG,GACrC,EAAK,QAAQ,EAAG,EAAG,EAAK,YAAc,GACtC,EAAK,QAAQ,EAAG,EAAK,WAAa,EAAG,EAAK,YAAc,GAG1D,SAAS,KACP,EAAc,IAAI,EAAA,YAAY,IAAI,EAAA,KAAK,KAAK,MAAM,EAAQ,GAAI,KAAK,MAAM,EAAS,IAAK,IAC3E,KAAK,GAGnB,SAAS,EAAQ,GACX,IAAA,GAAuB,EACxB,EAAA,CACD,EAAO,IAAI,EAAA,KAAK,EAAG,EAAK,WAAa,EAAG,EAAG,EAAK,YAAc,GACzD,IAAA,IAAI,EAAY,EAAG,EAAI,EAAY,KAAK,OAAQ,IAC/C,GAAA,EAAK,IAAI,IAAM,EAAY,KAAK,GAAG,GAAK,EAAK,IAAI,IAAM,EAAY,KAAK,GAAG,EAAG,CAChF,GAAc,EACd,aAGE,GACR,EAAK,QAAQ,EAAG,EAAK,IAAI,EAAG,EAAK,IAAI,GAGvC,SAAS,IACD,IAAA,EAAyB,SAAS,eAAe,qBACvD,EAAU,cAAc,YAAY,GAGtC,SAAS,KAEP,EAAQ,IAAI,EAAA,cAEN,UAAU,CACd,KAAM,CAAC,WACP,aAAc,EAAA,aAAa,QAC3B,OAAQ,EAAY,UAGtB,EAAM,UAAU,CACd,KAAM,CAAC,cACP,aAAc,EAAA,aAAa,QAC3B,OAAQ,EAAY,SAGtB,EAAM,UAAU,CACd,KAAM,CAAC,aACP,aAAc,EAAA,aAAa,QAC3B,OAAQ,EAAY,UAGtB,EAAM,UAAU,CACd,KAAM,CAAC,aACP,aAAc,EAAA,aAAa,QAC3B,OAAQ,EAAY,SAGtB,EAAM,UAAU,CACd,KAAM,CAAC,KACP,aAAc,EAAA,aAAa,MAC3B,OAAQ,IAKZ,SAAS,EAAK,GACZ,WAAW,WACJ,EAAY,OACf,EAAY,OACZ,EAAY,KAAK,GACjB,EAAY,UAAU,EAAM,GAC5B,EAAY,WAAW,IAEpB,EAAY,MACf,EAAK,SAEP,EAAK,EAAA,IAAI,EAAY,OAAQ,EAAG,GAAI,IAAK,MACxC,GAGL,SAAS,EAAW,EAAc,EAAe,QAAA,IAAA,IAAA,EAAA,KAE1C,IADD,IAAA,EAAsB,GACjB,EAAY,EAAG,EAAI,EAAQ,EAAK,OAAQ,IAC/C,EAAU,KAAK,GAGV,OAAA,EADY,EAAU,KAAK","file":"src.46d555f3.js","sourceRoot":"..\\src","sourcesContent":["!function(t,e){\"object\"==typeof exports&&\"object\"==typeof module?module.exports=e():\"function\"==typeof define&&define.amd?define([],e):\"object\"==typeof exports?exports.terminaltxt=e():t.terminaltxt=e()}(window,function(){return function(t){var e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}return i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var r in t)i.d(n,r,function(e){return t[e]}.bind(null,r));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,\"a\",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p=\"\",i(i.s=0)}([function(t,e,i){\"use strict\";i.r(e);var n,r=function(){function t(e,i){if(void 0===e&&(e=t.getDefaultCharacterSet()),\"string\"==typeof e){for(var n=[],r=0;r<e.length;r++){var o=e.charCodeAt(r);-1===n.indexOf(o)&&n.push(o)}this.set=n}else this.set=e;this.unknown=i?\"string\"==typeof i?i.charCodeAt(0):i:\"�\".charCodeAt(0)}return t.getDefaultCharacterSet=function(){return[32,9608]},t.prototype.getIndex=function(t){return this.set.indexOf(t.charCodeAt(0))},t.prototype.getValue=function(t){return t>=0&&t<this.set.length?this.set[t]:this.unknown},t.prototype.size=function(){return this.set.length},t.prototype.toString=function(t){return String.fromCharCode(this.getValue(t))},t}();!function(t){t[t.KEYDOWN=0]=\"KEYDOWN\",t[t.KEYUP=1]=\"KEYUP\",t[t.KEYPRESS=2]=\"KEYPRESS\"}(n||(n={}));var o,s=function(){function t(){this.actions=[],this.logKeys=!1,this.handleKey=this.handleKey.bind(this),document.addEventListener(\"keydown\",this.handleKey),document.addEventListener(\"keyup\",this.handleKey),document.addEventListener(\"keypress\",this.handleKey)}return t.prototype.addAction=function(t){this.actions.push(t)},t.prototype.setLogKeys=function(t){this.logKeys=t},t.prototype.handleKey=function(t){this.logKeys&&console.log(\"InputTracker Key Log: '\"+t.key+\"', type: \"+t.type);for(var e=0;e<this.actions.length;e++)-1!==this.actions[e].keys.indexOf(t.key)&&(\"keydown\"===t.type&&this.actions[e].keyEventType===n.KEYDOWN?this.actions[e].action(t.key):\"keyup\"===t.type&&this.actions[e].keyEventType===n.KEYUP?this.actions[e].action(t.key):\"keypress\"===t.type&&this.actions[e].keyEventType===n.KEYPRESS&&this.actions[e].action(t.key))},t}(),h=function(){function t(e){void 0===e&&(e=t.defaultContainer()),this.container=e,this.pre=document.createElement(\"pre\"),this.code=document.createElement(\"code\"),this.display=document.createElement(\"span\"),this.idNumber=t.getID(),this.container.appendChild(this.pre),this.pre.appendChild(this.code),this.code.appendChild(this.display),this.setIDs(),this.setClasses()}return t.defaultContainer=function(){var t=document.createElement(\"div\");return document.body.appendChild(t),t},t.getID=function(){var e=t.idCounter;return t.idCounter++,e},t.prototype.clear=function(){this.display.innerHTML=\"\"},t.prototype.setClasses=function(){this.container.classList.add(\"termtxt-container\"),this.pre.classList.add(\"termtxt-pre\"),this.code.classList.add(\"termtxt-code\"),this.display.classList.add(\"termtxt-display\")},t.prototype.setIDs=function(){var t;t=0===this.idNumber?\"\":\"-\"+this.idNumber.toString(),this.container.id=\"termtxt-container\"+t,this.pre.id=\"termtxt-pre\"+t,this.code.id=\"termtxt-code\"+t,this.display.id=\"termtxt-display\"+t},t.idCounter=0,t}(),a=(o=function(t,e){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}o(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),l=function(t){function e(e,i){void 0===e&&(e=-1);var n=this;return(n=i?t.call(this,i)||this:t.call(this)||this).maxLines=e,n.lines=[],n.addLine(),n.removeFirstChild(1),n}return a(e,t),e.prototype.addLine=function(t){void 0===t&&(t=\"\"),this.display.appendChild(document.createTextNode(\"\\n\")),this.lines.push(document.createElement(\"span\")),this.display.appendChild(this.lines[this.lines.length-1]),this.setCurrentLine(t)},e.prototype.appendCurrentLine=function(t){this.lines[this.lines.length-1].innerHTML+=t,this.checkForOverflow()},e.prototype.removeFirstLine=function(){this.removeFirstChild(2),this.lines.shift()},e.prototype.setCurrentLine=function(t){this.lines[this.lines.length-1].innerHTML=t,this.checkForOverflow()},e.prototype.checkForOverflow=function(){if(this.maxLines>=0)for(;this.lines.length>this.maxLines;)this.removeFirstLine()},e.prototype.removeFirstChild=function(t){for(var e=0;e<t;e++)this.display.removeChild(this.display.childNodes[0])},e}(h),u=function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=\"\"),this.linesToCheck=0,t.width?this.width=t.width:this.width=80,t.height?this.height=t.height:this.height=25,t.container?this.lineController=new l(this.height,t.container):this.lineController=new l(this.height),e.length>this.getWidth()&&(e=\"\"),this.lineController.setCurrentLine(e)}return t.prototype.getHeight=function(){return this.height},t.prototype.getWidth=function(){return this.width<0?Number.MAX_VALUE:this.width},t.prototype.newLine=function(){this.lineController.addLine()},t.prototype.overwrite=function(t){var e;e=Math.ceil(t.length/this.getWidth())>this.linesToCheck?Math.ceil(t.length/this.getWidth()):this.linesToCheck;for(var i=0;i<=e;i++){var n=this.lineController.lines.length-(i+1);if(n>=0&&n<this.lineController.lines.length&&this.lineController.lines[n].innerHTML.substring(0,1)===t.substring(0,1)){var r=t.match(new RegExp(\".{1,\"+this.getWidth()+\"}\",\"g\"));if(null!==r){for(var o=0;o<r.length;o++)n+o<this.lineController.lines.length?this.lineController.lines[n+o].innerHTML=r[o]:this.writeln(r[o]);for(o=r.length;o<=i;o++)n+o<this.lineController.lines.length&&(this.lineController.lines[n+o].innerHTML=\"\");return void(this.linesToCheck=r.length+1)}}}1===this.lineController.lines.length&&\"\"===this.lineController.lines[0].innerHTML?this.write(t):this.writeln(t)},t.prototype.resetLinesToCheck=function(){this.linesToCheck=0},t.prototype.write=function(t){var e=this.lineController.lines[this.lineController.lines.length-1].innerHTML.length;e+t.length<=this.getWidth()?this.lineController.appendCurrentLine(t):e===this.getWidth()?this.lineController.addLine(t):(this.lineController.appendCurrentLine(t.substring(0,this.getWidth()-e)),this.writeln(t.substring(this.getWidth()-e,t.length)))},t.prototype.writeln=function(t){if(t.length<=this.getWidth())this.lineController.addLine(t);else{var e=t.match(new RegExp(\".{1,\"+this.getWidth()+\"}\",\"g\"));if(null!==e)for(var i=0;i<e.length;i++)this.lineController.addLine(e[i])}},t}(),c=function(){function t(t){void 0===t&&(t=new u),this.history=[],this.historyCounter=0,this.historyMax=100,this.current=\"\",this.commands=[],this.input=new s,this.output=t,this.finalizeCurrent=this.finalizeCurrent.bind(this),this.addToCurrent=this.addToCurrent.bind(this),this.backspaceCurrent=this.backspaceCurrent.bind(this),this.historyForwards=this.historyForwards.bind(this),this.historyBack=this.historyBack.bind(this),this.helpCommand=this.helpCommand.bind(this),this.setupInput(),this.registerCommand({name:\"help\",description:\"Provides information about available commands.\",command:this.helpCommand,options:[{argument:\"lookup\",description:\"Use to look up help pages for a specific registered command.\"}]}),this.update()}return t.indexOfCommandArgument=function(t,e){for(var i=0;i<e.length;i++)if(e[i].argument===t)return i;return-1},t.indexOfCommandArguments=function(e,i){for(var n=[],r=0;r<e.length;r++)n.push(t.indexOfCommandArgument(e[r],i));return n},t.prototype.finalizeCurrent=function(t){for(var e=-1,i=this.current.split(\" \"),n=0;n<this.commands.length;n++)if(this.commands[n].name.toLowerCase()===i[0].toLowerCase()){var r=this.parseArguments(i);e=this.commands[n].command(this.output,r);break}-1===e?this.output.writeln(\"no '\"+this.current+\"' found, please try again or enter 'help' for more information.\"):e>0&&this.output.writeln(\"'\"+i[0]+\"' exit code [\"+e+\"]. Use 'help --lookup \"+i[0]+\"' for more information.\"),this.addToHistory(this.current),this.output.newLine(),this.output.resetLinesToCheck(),this.current=\"\",this.update()},t.prototype.helpCommand=function(e,i){if(0===i.length){e.writeln(\"COMMAND HELP\"),e.writeln(\"------------\");for(var n=0;n<this.commands.length;n++)e.writeln(\"Command: \"+this.commands[n].name),e.writeln(\"Description: \"+this.commands[n].description);return e.writeln(\"Use 'help --lookup command-name' for more info on specific commands.\"),0}var r=t.indexOfCommandArguments([\"lookup\"],i);if(-1!==r[0]){var o=i[r[0]];if(void 0===o.parameters||1!==o.parameters.length)return e.writeln(\"Invalid number of arguments for help --lookup. Example: 'help --lookup command-name'.\"),-2;var s=null;for(n=0;n<this.commands.length;n++)this.commands[n].name===o.parameters[0]&&(s=this.commands[n]);if(null===s)return e.writeln(o.parameters[0]+\" is not a command. Use 'help' to list commands.\"),-2;if(e.writeln(\"HELP for \"+s.name),e.writeln(\"Description: \"+s.description),e.writeln(\"OPTIONAL ARGUMENTS\"),void 0!==s.options){e.writeln(\"Single letter optional arguments should be prefaced with '-' and multi-letter arguments should be prefaced with '--'.\");for(n=0;n<s.options.length;n++)e.writeln(\"  arg: \"+s.options[n].argument),e.writeln(\"  description: \"+s.options[n].description)}else e.writeln(\"No optional arguments defined.\");if(e.writeln(\"EXIT CODES\"),void 0!==s.exitCodes)for(n=0;n<s.exitCodes.length;n++)e.writeln(\"  exit code: \"+s.exitCodes[n].code),e.writeln(\"  description: \"+s.exitCodes[n].description);else e.writeln(\"No exit codes defined.\");return 0}return e.writeln(\"Invalid help command! Use 'help --lookup help' for more info.\"),-2},t.prototype.registerCommand=function(t){this.commands.push(t)},t.prototype.update=function(){this.output.overwrite(\"$ \"+this.current)},t.prototype.addToCurrent=function(t){this.current=this.current+t,this.update()},t.prototype.addToHistory=function(t){this.history.push(t),this.history.length>this.historyMax&&this.history.shift(),this.historyCounter=this.history.length},t.prototype.backspaceCurrent=function(t){this.current=this.current.substring(0,this.current.length-1),this.update()},t.prototype.historyBack=function(t){this.history.length>0&&(this.historyCounter>0&&this.historyCounter--,this.current=this.history[this.historyCounter],this.update())},t.prototype.historyForwards=function(t){this.history.length>0&&(this.historyCounter<this.history.length-1&&this.historyCounter++,this.current=this.history[this.historyCounter],this.update())},t.prototype.parseArguments=function(t){for(var e=[],i=1;i<t.length;){if(\"--\"===t[i].substring(0,2)){var n,r=[];for(n=t[i].substring(2),i++;i<t.length&&\"-\"!==t[i].substring(0,1);)r.push(t[i]),i++;i--,e.push({argument:n,parameters:r})}else if(\"-\"===t[i].substring(0,1))for(var o=1;o<t[i].length;o++)e.push({argument:t[i].substring(o,o+1)});i++}return e},t.prototype.setupInput=function(){this.input.addAction({keys:[\"Backspace\"],action:this.backspaceCurrent,keyEventType:n.KEYUP}),this.input.addAction({keys:[\"Enter\"],action:this.finalizeCurrent,keyEventType:n.KEYPRESS}),this.input.addAction({keys:[\" \",\"-\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"O\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"U\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"],action:this.addToCurrent,keyEventType:n.KEYPRESS}),this.input.addAction({keys:[\"ArrowUp\"],action:this.historyBack,keyEventType:n.KEYUP}),this.input.addAction({keys:[\"ArrowDown\"],action:this.historyForwards,keyEventType:n.KEYUP})},t}(),d=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),p=function(t){function e(e,i,n){var r=this;return(r=n?t.call(this,n)||this:t.call(this)||this).width=e,r.height=i,r.cells=[],r.initCells(),r}return d(e,t),e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e.prototype.index=function(t,e){return t+e*this.width},e.prototype.setCellValue=function(t,e,i){var n;n=i?this.index(e,i):e,this.cells[n].innerHTML=t},e.prototype.initCells=function(){for(var t=0;t<this.height;t++){for(var e=0;e<this.width;e++)this.cells.push(document.createElement(\"span\")),this.display.appendChild(this.cells[this.cells.length-1]),this.cells[this.cells.length-1].id=t+\"-\"+e;this.display.appendChild(document.createTextNode(\"\\n\"))}},e}(h),f=function(){function t(t,e){this.changed=[],this.data=[],this.width=t,this.height=e,this.initData(),this.initChanged()}return t.prototype.doneChange=function(t){this.changed[t]=!1},t.prototype.getCell=function(t){return this.data[t]},t.prototype.getHeight=function(){return this.height},t.prototype.getWidth=function(){return this.width},t.prototype.hasBeenChanged=function(t){return this.changed[t]},t.prototype.index=function(t,e){return t+e*this.width},t.prototype.numberOfCells=function(){return this.width*this.height},t.prototype.setCell=function(t,e){this.data[e]=t,this.changed[e]=!0},t.prototype.initChanged=function(){this.changed=[];for(var t=0;t<this.width*this.height;t++)this.changed.push(!0)},t.prototype.initData=function(){this.data=[];for(var t=0;t<this.width*this.height;t++)this.data.push(0)},t}(),y=function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=new r),t.width?this.width=t.width:this.width=80,t.height?this.height=t.height:this.height=25,t.container?this.cellController=new p(this.width,this.height,t.container):this.cellController=new p(this.width,this.height),this.cellData=new f(this.width,this.height),this.characterSet=e}return t.prototype.getCharacterSet=function(){return this.characterSet},t.prototype.getHeight=function(){return this.height},t.prototype.getWidth=function(){return this.width},t.prototype.setCell=function(t,e,i){var n;n=\"string\"==typeof t?this.characterSet.getIndex(t):t>=0&&t<this.characterSet.set.length?t:-1,this.cellData.setCell(n,this.cellData.index(e,i))},t.prototype.update=function(){for(var t=0;t<this.cellData.numberOfCells();t++)this.cellData.hasBeenChanged(t)&&(this.cellController.setCellValue(this.characterSet.toString(this.cellData.getCell(t)),t),this.cellData.doneChange(t))},t}();i.d(e,\"CharacterSet\",function(){return r}),i.d(e,\"InputTracker\",function(){return s}),i.d(e,\"KeyEventType\",function(){return n}),i.d(e,\"CommandTracker\",function(){return c}),i.d(e,\"GraphicsTerminal\",function(){return y}),i.d(e,\"OutputTerminal\",function(){return u})}])});","export class Vec2 {\r\n\r\n  public x: number;\r\n  public y: number;\r\n\r\n  constructor(x: number = 0, y: number = 0) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  public static copy(vec: Vec2): Vec2 {\r\n    return new Vec2(vec.x, vec.y);\r\n  }\r\n\r\n  public add(other: Vec2): void\r\n  public add(x: number, y: number): void\r\n  public add(xOrOther: number | Vec2, y?: number): void {\r\n    if (typeof xOrOther === 'number') {\r\n      this.x += xOrOther;\r\n      this.y += y;\r\n    } else {\r\n      this.x += xOrOther.x;\r\n      this.y += xOrOther.y;\r\n    }\r\n  }\r\n\r\n}","import { Vec2 } from './Vec2';\r\n\r\nexport class Leaf {\r\n\r\n  public pos: Vec2;\r\n  \r\n  public xMin: number;\r\n  public xMax: number;\r\n  public yMin: number;\r\n  public yMax: number;\r\n\r\n  constructor(xMin: number, xMax: number, yMin: number, yMax: number) {\r\n    this.xMin = xMin;\r\n    this.xMax = xMax;\r\n    this.yMin = yMin;\r\n    this.yMax = yMax;\r\n\r\n    this.reset();\r\n  }\r\n\r\n  public reset(): void {\r\n    this.pos = new Vec2(\r\n      Math.round(Math.random() * (this.xMax - this.xMin) + this.xMin),\r\n      Math.round(Math.random() * (this.yMax - this.yMin) + this.yMin)\r\n    );\r\n  }\r\n\r\n}","export enum Direction {\r\n  NORTH,\r\n  EAST,\r\n  SOUTH,\r\n  WEST,\r\n}","import { Vec2 } from \"./Vec2\";\r\nimport { GraphicsTerminal } from \"terminaltxt\";\r\nimport { Direction } from \"./Direction\";\r\nimport { Leaf } from \"./Leaf\";\r\n\r\ntype newLeafFunction = (caterpillar: Caterpillar) => void;\r\n\r\nexport class Caterpillar {\r\n\r\n  public body: Vec2[] = []; // 0 is the tail, end is the head\r\n  public erase: Vec2[] = [];\r\n  public direction: Direction;\r\n  public length: number;\r\n  public dead: boolean = false;\r\n  public fill: number;\r\n\r\n  constructor(start: Vec2, fill: number) {\r\n    this.body.push(start);\r\n    this.body.push(Vec2.copy(this.body[0]));\r\n    this.body[0].add(0, 1);\r\n    \r\n    this.direction = Direction.NORTH;\r\n    this.length = 2;\r\n    this.fill = fill;\r\n\r\n    this.goNorth = this.goNorth.bind(this);\r\n    this.goEast = this.goEast.bind(this);\r\n    this.goSouth = this.goSouth.bind(this);\r\n    this.goWest = this.goWest.bind(this);\r\n\r\n    this.grow = this.grow.bind(this);\r\n  }\r\n\r\n  public show(term: GraphicsTerminal) {\r\n    for (let i: number = 0; i < this.body.length; i++) {\r\n      term.setCell(this.fill, this.body[i].x, this.body[i].y);\r\n    }\r\n    for (let i: number = 0; i < this.erase.length; i++) {\r\n      term.setCell(0, this.erase[i].x, this.erase[i].y);\r\n    }\r\n    this.erase = [];\r\n  }\r\n\r\n  public move() {\r\n    let head = Vec2.copy(this.body[this.body.length - 1]);\r\n    switch(this.direction) {\r\n      case Direction.NORTH:\r\n        head.add(0, -1);\r\n        break;\r\n      case Direction.EAST:\r\n        head.add(1, 0);\r\n        break;\r\n      case Direction.SOUTH:\r\n        head.add(0, 1);\r\n        break;\r\n      case Direction.WEST:\r\n        head.add(-1, 0);\r\n        break;\r\n    }\r\n    this.body.push(head);\r\n    while(this.body.length > this.length) {\r\n      this.erase.push(this.body.shift());\r\n    }\r\n  }\r\n\r\n  public grow() {\r\n    this.length++;\r\n  }\r\n\r\n  public goNorth(): void {\r\n    if (this.direction !== Direction.SOUTH) {\r\n      this.direction = Direction.NORTH;\r\n    }\r\n  }\r\n\r\n  public goEast(): void {\r\n    if (this.direction !== Direction.WEST) {\r\n      this.direction = Direction.EAST;\r\n    }\r\n  }\r\n\r\n  public goSouth(): void {\r\n    if (this.direction !== Direction.NORTH) {\r\n      this.direction = Direction.SOUTH;\r\n    }\r\n  }\r\n\r\n  public goWest(): void {\r\n    if (this.direction !== Direction.EAST) {\r\n      this.direction = Direction.WEST;\r\n    }\r\n  }\r\n\r\n  public checkGrow(leaf: Leaf, newLeaf: newLeafFunction) {\r\n    if (leaf.pos.x === this.body[this.body.length - 1].x\r\n      && leaf.pos.y === this.body[this.body.length - 1].y) {\r\n      this.grow();\r\n      newLeaf(this);\r\n    }\r\n  }\r\n\r\n  public checkEdges(term: GraphicsTerminal) {\r\n    const head: Vec2 = this.body[this.body.length - 1];\r\n    if (head.x <= 0 || head.x >= term.getWidth() - 1 || head.y <= 0 || head.y >= term.getHeight() - 1) {\r\n      this.dead = true;\r\n      return;\r\n    }\r\n    for (let i: number = 0; i < this.body.length - 2; i++) {\r\n      if (head.x === this.body[i].x && head.y === this.body[i].y) {\r\n        this.dead = true;\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n}","export function map(value: number, min1: number, max1: number, min2: number, max2: number) {\r\n  return (value - min1) / (max1 - min1) * (max2 - min2) + min2;\r\n}","import { GraphicsTerminal, TerminalConfig, CharacterSet, InputTracker, KeyEventType, KeyAction, OutputTerminal } from 'terminaltxt';\r\nimport { Leaf } from './Leaf';\r\nimport { Caterpillar } from './Caterpillar';\r\nimport { Vec2 } from './Vec2';\r\nimport { map } from './Map';\r\n\r\nif (document.readyState === 'complete') {\r\n  init();\r\n} else {\r\n  window.addEventListener('load', init, false);\r\n}\r\n\r\nconst WIDTH: number = 80;\r\nconst HEIGHT: number = 25;\r\nlet title: OutputTerminal;\r\nlet term: GraphicsTerminal;\r\nlet caterpillar: Caterpillar;\r\nlet leaf: Leaf;\r\nlet input: InputTracker;\r\n\r\nfunction init() {\r\n  input = new InputTracker();\r\n  titleSequence();\r\n}\r\n\r\nfunction titleSequence(): void {\r\n  title = new OutputTerminal(\r\n    {\r\n      container: document.getElementById('output-container'),\r\n      width: WIDTH,\r\n      height: HEIGHT,\r\n    } as TerminalConfig\r\n  );\r\n  title.write(fitToWidth('Caterpillar', WIDTH));\r\n  title.writeln('by Fi Graham');\r\n  title.newLine();\r\n  title.writeln('Caterpillar is a clone of the classic snake game. It was created using ');\r\n  title.writeln('TerminalTXT a typescript library. Please enjoy!');\r\n  title.newLine();\r\n  title.writeln('Use the arrow keys on your keyboard to move. Press \\'Space\\' to restart the game.');\r\n  title.writeln('Press \\'Enter\\' to begin.');\r\n  input.addAction({\r\n    keys: ['Enter'],\r\n    keyEventType: KeyEventType.KEYUP,\r\n    action: beginGame,\r\n  } as KeyAction);\r\n}\r\n\r\nfunction beginGame(): void {\r\n  deleteOutput();\r\n  term = new GraphicsTerminal(\r\n    {\r\n      container: document.getElementById('game-container'), \r\n      width: 80, \r\n      height: 23\r\n    } as TerminalConfig, \r\n    new CharacterSet(' ○●║═╔╗╚╝'),\r\n  );\r\n  newGame();\r\n  loop(120);\r\n}\r\n\r\nfunction newGame(): void {\r\n  clearTerminal();\r\n  newCaterpillar();\r\n  newLeaf(caterpillar);\r\n  border();\r\n  term.update();\r\n  userControls();\r\n}\r\n\r\nfunction clearTerminal(): void {\r\n  for (let x: number = 0; x < WIDTH; x++) {\r\n    for (let y: number = 0; y < HEIGHT; y++) {\r\n      term.setCell(0, x, y);\r\n    }\r\n  }\r\n}\r\n\r\nfunction border() {\r\n  for (let col: number = 1; col < term.getWidth() - 1; col++) {\r\n    term.setCell(4, col, 0);\r\n    term.setCell(4, col, term.getHeight() - 1);\r\n  }\r\n  for (let row: number = 1; row < term.getHeight() - 1; row++) {\r\n    term.setCell(3, 0, row);\r\n    term.setCell(3, term.getWidth() - 1, row);\r\n  }\r\n  term.setCell(5, 0, 0);\r\n  term.setCell(6, term.getWidth() - 1, 0);\r\n  term.setCell(7, 0, term.getHeight() - 1);\r\n  term.setCell(8, term.getWidth() - 1, term.getHeight() - 1);\r\n}\r\n\r\nfunction newCaterpillar(): void {\r\n  caterpillar = new Caterpillar(new Vec2(Math.floor(WIDTH / 2), Math.floor(HEIGHT / 2)), 1);\r\n  caterpillar.show(term);\r\n}\r\n\r\nfunction newLeaf(caterpillar: Caterpillar): void {\r\n  let overlapping: boolean = false;\r\n  do {\r\n    leaf = new Leaf(1, term.getWidth() - 2, 1, term.getHeight() - 2);\r\n    for (let i: number = 0; i < caterpillar.body.length; i++) {\r\n      if (leaf.pos.x === caterpillar.body[i].x && leaf.pos.y === caterpillar.body[i].y) {\r\n        overlapping = true;\r\n        break;\r\n      }\r\n    }\r\n  } while(overlapping);\r\n  term.setCell(2, leaf.pos.x, leaf.pos.y);\r\n}\r\n\r\nfunction deleteOutput(): void {\r\n  const outputDiv: HTMLElement = document.getElementById('termtxt-container');\r\n  outputDiv.parentElement.removeChild(outputDiv);\r\n}\r\n\r\nfunction userControls(): void {\r\n\r\n  input = new InputTracker();\r\n\r\n  input.addAction({\r\n    keys: ['ArrowUp'],\r\n    keyEventType: KeyEventType.KEYDOWN,\r\n    action: caterpillar.goNorth,\r\n  } as KeyAction);\r\n\r\n  input.addAction({\r\n    keys: ['ArrowRight'],\r\n    keyEventType: KeyEventType.KEYDOWN,\r\n    action: caterpillar.goEast,\r\n  } as KeyAction);\r\n\r\n  input.addAction({\r\n    keys: ['ArrowDown'],\r\n    keyEventType: KeyEventType.KEYDOWN,\r\n    action: caterpillar.goSouth,\r\n  } as KeyAction);\r\n\r\n  input.addAction({\r\n    keys: ['ArrowLeft'],\r\n    keyEventType: KeyEventType.KEYDOWN,\r\n    action: caterpillar.goWest,\r\n  } as KeyAction);\r\n  \r\n  input.addAction({\r\n    keys: [' '],\r\n    keyEventType: KeyEventType.KEYUP,\r\n    action: newGame,\r\n  } as KeyAction);\r\n\r\n}\r\n\r\nfunction loop(speed: number): void {\r\n  setTimeout(() => {\r\n    if (!caterpillar.dead) {\r\n      caterpillar.move();\r\n      caterpillar.show(term);\r\n      caterpillar.checkGrow(leaf, newLeaf);\r\n      caterpillar.checkEdges(term);\r\n    }\r\n    if (!caterpillar.dead) {\r\n      term.update();\r\n    }\r\n    loop(map(caterpillar.length, 2, 10, 120, 60));\r\n  }, speed);\r\n}\r\n\r\nfunction fitToWidth(text: string, width: number, fillChar: string = ' '): string {\r\n  let fillArray: string[] = [];\r\n  for (let i: number = 0; i < width - text.length; i++) {\r\n    fillArray.push(fillChar);\r\n  }\r\n  let fill: string = fillArray.join('');\r\n  return text + fill;\r\n}"]}